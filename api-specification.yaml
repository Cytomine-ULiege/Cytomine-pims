openapi: 3.0.0
info:
  title: Cytomine Python Image Managament Server PIMS
  description: Cytomine Python Image Managament Server PIMS
  version: 1.0.0
servers:
  - url: 'https'
tags:
  - name: 'Tiles'
    description: |
      Tiles are rectangular regions extracted from an image at given resolution.
      Tile size is always 256x256, except on borders.
  - name: 'Windows'
    description: ''
  - name: 'Thumbnails'
    description: ''
  - name: 'Rescaled'
    description: ''
  - name: 'Metadata'
    description: ''
  - name: 'Export'
    description: ''
  - name: 'Import'
    description: ''
  - name: Server
  - name: Housekeeping
paths:
  /file/{filepath}/tile/zoom/{zoom}/ti/{tile_index}:
    parameters:
      - $ref: '#/components/parameters/filepath'
      - $ref: '#/components/parameters/zoom'
      - $ref: '#/components/parameters/tile_index'
      - $ref: '#/components/parameters/etag'
    get:
      summary: Get a tile from reference plane by zoom
      tags:
        - Tiles
      description: |
        Get a 8-bit tile at a given zoom level and tile index, optimized for visualisation, with all image channels.
        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
      parameters:
        - $ref: '#/components/parameters/min_intensities'
        - $ref: '#/components/parameters/max_intensities'
        - $ref: '#/components/parameters/colormaps'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/gammas'
        - $ref: '#/components/parameters/log'
      responses:
        200:
          $ref: '#/components/responses/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
    post:
      summary: Get a tile from reference plane by zoom
      tags:
        - Tiles
      description: |
        **`GET with body` - when a GET with URL encoded query parameters is not possible due to URL size limits, a POST
        with body content must be used.**


        Get a 8-bit tile at a given zoom level and tile index, optimized for visualisation, with all image channels.
        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                min_intensities:
                  $ref: '#/components/schemas/intensity-selection-list'
                max_intensities:
                  $ref: '#/components/schemas/intensity-selection-list'
                colormaps:
                  $ref: '#/components/schemas/colormap-name-list'
                filters:
                  $ref: '#/components/schemas/filter-name-list'
                gammas:
                  $ref: '#/components/schemas/gamma-list'
                log:
                  $ref: '#/components/schemas/log'
      responses:
        200:
          $ref: '#/components/responses/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/tile/c/{channels}/z/{z_slices}/t/{timepoints}/zoom/{zoom}/ti/{tile_index}:
    parameters:
      - $ref: '#/components/parameters/filepath'
      - $ref: '#/components/parameters/zoom'
      - $ref: '#/components/parameters/tile_index'
      - $ref: '#/components/parameters/channels'
      - $ref: '#/components/parameters/z_slices'
      - $ref: '#/components/parameters/timepoints'
      - $ref: '#/components/parameters/etag'
    get:
      summary: Get a tile from a plane by zoom
      description: |
        Get a 8-bit tile at a given zoom level and tile index, optimized for visualisation, with given channels, focal
        planes and timepoints. If multiple channels are given (slice or selection), they are merged. If multiple focal
        planes or timepoints are given (slice or selection), a reduction function must be provided.
      tags:
        - Tiles
      parameters:
        - $ref: '#/components/parameters/c_reduction'
        - $ref: '#/components/parameters/z_reduction'
        - $ref: '#/components/parameters/t_reduction'
        - $ref: '#/components/parameters/min_intensities'
        - $ref: '#/components/parameters/max_intensities'
        - $ref: '#/components/parameters/colormaps'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/gammas'
        - $ref: '#/components/parameters/log'
      responses:
        200:
          $ref: '#/components/responses/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
    post:
      summary: Get a tile from a plane by zoom
      description: |
        **`GET with body` - when a GET with URL encoded query parameters is not possible due to URL size limits, a POST
        with body content must be used.**


        Get a 8-bit tile at a given zoom level and tile index, optimized for visualisation, with given channels, focal
        planes and timepoints. If multiple channels are given (slice or selection), they are merged. If multiple focal
        planes or timepoints are given (slice or selection), a reduction function must be provided.
      tags:
        - Tiles
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                c_reduction:
                  $ref: '#/components/schemas/c-reduction'
                z_reduction:
                  $ref: '#/components/schemas/reduction'
                t_reduction:
                  $ref: '#/components/schemas/reduction'
                min_intensities:
                  $ref: '#/components/schemas/intensity-selection-list'
                max_intensities:
                  $ref: '#/components/schemas/intensity-selection-list'
                colormaps:
                  $ref: '#/components/schemas/colormap-name-list'
                filters:
                  $ref: '#/components/schemas/filter-name-list'
                gammas:
                  $ref: '#/components/schemas/gamma-list'
                log:
                  $ref: '#/components/schemas/log'
      responses:
        200:
          $ref: '#/components/responses/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/tile/level/{level}/ti/{tile_index}:
    parameters:
      - $ref: '#/components/parameters/filepath'
      - $ref: '#/components/parameters/level'
      - $ref: '#/components/parameters/tile_index'
      - $ref: '#/components/parameters/etag'
    get:
      tags:
        - Tiles
      summary: Get a tile from reference plane by level
      description: |
        Get a 8-bit tile at given tier level and tile index, optimized for visualisation, with all image channels.
        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
      parameters:
        - $ref: '#/components/parameters/min_intensities'
        - $ref: '#/components/parameters/max_intensities'
        - $ref: '#/components/parameters/colormaps'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/gammas'
        - $ref: '#/components/parameters/log'
      responses:
        200:
          $ref: '#/components/responses/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
    post:
      tags:
        - Tiles
      summary: Get a tile from reference plane by level
      description: |
        **`GET with body` - when a GET with URL encoded query parameters is not possible due to URL size limits, a POST
        with body content must be used.**

        Get a 8-bit tile at given tier level and tile index, optimized for visualisation, with all image channels.
        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                min_intensities:
                  $ref: '#/components/schemas/intensity-selection-list'
                max_intensities:
                  $ref: '#/components/schemas/intensity-selection-list'
                colormaps:
                  $ref: '#/components/schemas/colormap-name-list'
                filters:
                  $ref: '#/components/schemas/filter-name-list'
                gammas:
                  $ref: '#/components/schemas/gamma-list'
                log:
                  $ref: '#/components/schemas/log'
      responses:
        200:
          $ref: '#/components/responses/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/tile/c/{channels}/z/{z_slices}/t/{timepoints}/level/{level}/ti/{tile_index}:
    parameters:
      - $ref: '#/components/parameters/filepath'
      - $ref: '#/components/parameters/level'
      - $ref: '#/components/parameters/tile_index'
      - $ref: '#/components/parameters/channels'
      - $ref: '#/components/parameters/z_slices'
      - $ref: '#/components/parameters/timepoints'
      - $ref: '#/components/parameters/etag'
    get:
      summary: Get a tile from a plane by level
      description: |
        Get a 8-bit tile at a given zoom level and tile index, optimized for visualisation, with given channels, focal
        planes and timepoints. If multiple channels are given (slice or selection), they are merged. If multiple focal
        planes or timepoints are given (slice or selection), a reduction function must be provided.
      tags:
        - Tiles
      parameters:
        - $ref: '#/components/parameters/c_reduction'
        - $ref: '#/components/parameters/z_reduction'
        - $ref: '#/components/parameters/t_reduction'
        - $ref: '#/components/parameters/min_intensities'
        - $ref: '#/components/parameters/max_intensities'
        - $ref: '#/components/parameters/colormaps'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/gammas'
        - $ref: '#/components/parameters/log'
      responses:
        200:
          $ref: '#/components/responses/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
    post:
      summary: Get a tile from a plane by level
      description: |
        **`GET with body` - when a GET with URL encoded query parameters is not possible due to URL size limits, a POST
        with body content must be used.**


        Get a 8-bit tile at a given zoom level and tile index, optimized for visualisation, with given channels, focal
        planes and timepoints. If multiple channels are given (slice or selection), they are merged. If multiple focal
        planes or timepoints are given (slice or selection), a reduction function must be provided.
      tags:
        - Tiles
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                c_reduction:
                  $ref: '#/components/schemas/c-reduction'
                z_reduction:
                  $ref: '#/components/schemas/reduction'
                t_reduction:
                  $ref: '#/components/schemas/reduction'
                min_intensities:
                  $ref: '#/components/schemas/intensity-selection-list'
                max_intensities:
                  $ref: '#/components/schemas/intensity-selection-list'
                colormaps:
                  $ref: '#/components/schemas/colormap-name-list'
                filters:
                  $ref: '#/components/schemas/filter-name-list'
                gammas:
                  $ref: '#/components/schemas/gamma-list'
                log:
                  $ref: '#/components/schemas/log'
      responses:
        200:
          $ref: '#/components/responses/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
#  /file/{filepath}/tile/zoom/{zoom}/tx/{tile_x}/ty/{tile_y}:
#    get:
#      tags:
#        - Tiles
#      description: |
#        Get a 8-bit tile at a given zoom level and tile coordinates, optimized for visualisation, with all image channels.
#        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
#      parameters:
#        - $ref: '#/components/parameters/filepath'
#        - $ref: '#/components/parameters/zoom'
#        - $ref: '#/components/parameters/tile_x'
#        - $ref: '#/components/parameters/tile_y'
#        - $ref: '#/components/parameters/etag'
#      responses:
#        200:
#          $ref: '#/components/responses/tile'
#        304:
#          $ref: '#/components/responses/not-modified'
#        400:
#          $ref: '#/components/responses/bad-request-fp'
#        404:
#          $ref: '#/components/responses/not-found-fp'
#  /file/{filepath}/tile/level/{level}/tx/{tile_x}/ty/{tile_y}:
#    get:
#      tags:
#        - Tiles
#      description: |
#        Get a 8-bit tile at given tier level and tile coordinates, optimized for visualisation, with all image channels.
#        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
#      parameters:
#        - $ref: '#/components/parameters/filepath'
#        - $ref: '#/components/parameters/level'
#        - $ref: '#/components/parameters/tile_x'
#        - $ref: '#/components/parameters/tile_y'
#        - $ref: '#/components/parameters/etag'
#      responses:
#        200:
#          $ref: '#/components/responses/tile'
#        304:
#          $ref: '#/components/responses/not-modified'
#        400:
#          $ref: '#/components/responses/bad-request-fp'
#        404:
#          $ref: '#/components/responses/not-found-fp'
  /slice/tile:
    get:
      description: Get a tile using IMS V2.x specification.
      deprecated: true
      tags:
        - Tiles
      parameters:
        - name: 'mimeType'
          in: query
          description: 'Image mime type'
          required: true
          schema:
            type: string
        - name: 'fif'
          in: query
          description: |
            Full file path.
            Must be used together with `z`.
          schema:
            type: string
        - name: 'z'
          in: query
          description: Zoom level.
          schema:
            type: integer
            format: int64
          required: true
        - name: 'zoomify'
          in: query
          description: |
            Full file path if Zoomify protocol is used.
            Must be used together with `z`, `x`, `y` and `tileGroup`.
          schema:
            type: string
        - name: tileGroup
          in: query
          description: |
            Tile Group used in Zoomify protocol.
            Must be used together with `z`, `x`, `y` and `zoomify`.
          schema:
            type: string
        - name: x
          in: query
          description: |
            X parameter in Zoomify protocol.
            Must be used together with `z`, `y`, `tileGroup` and `zoomify`.
          schema:
            type: integer
            format: int64
        - name: y
          in: query
          description: |
            Y parameter in Zoomify protocol.
            Must be used together with `z`, `x`, `tileGroup` and `zoomify`.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The tile
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/tile'
        400:
          description: Bad request
  /file/{filepath}/thumbnail:
    get:
      summary: Get thumbnail for reference plane
      description: |
        Get a 8-bit thumbnail optimized for visualisation, with all image channels. For multidimensional images, the
        thumbnail is extracted from the median focal plane at first timepoint.
      tags:
        - Thumbnails
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/thumb-size'
        - $ref: '#/components/parameters/thumb-width'
        - $ref: '#/components/parameters/thumb-height'
        - $ref: '#/components/parameters/thumb-zoom'
        - $ref: '#/components/parameters/thumb-level'
        - $ref: '#/components/parameters/min_intensities'
        - $ref: '#/components/parameters/max_intensities'
        - $ref: '#/components/parameters/colormaps'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/gammas'
        - $ref: '#/components/parameters/log'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          $ref: '#/components/responses/thumbnail'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /image/tile.jpg:
    get:
      description: Get a tile using IMS V1.x specification.
      deprecated: true
      tags:
        - Tiles
      parameters:
        - name: 'mimeType'
          in: query
          description: 'Image mime type'
          required: true
          schema:
            type: string
        - name: 'z'
          in: query
          description: Zoom level.
          schema:
            type: integer
            format: int64
          required: true
        - name: 'zoomify'
          in: query
          description: |
            Full file path if Zoomify protocol is used.
          required: true
          schema:
            type: string
        - name: tileGroup
          in: query
          description: |
            Tile Group used in Zoomify protocol.
          schema:
            type: string
          required: true
        - name: x
          in: query
          description: |
            X parameter in Zoomify protocol.
          schema:
            type: integer
            format: int64
          required: true
        - name: y
          in: query
          description: |
            Y parameter in Zoomify protocol.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The tile
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/tile'
        400:
          description: Bad
  /info:
    get:
      description: Status of PIMS
      tags:
        - Server
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    description: PIMS version
                  api_version:
                    type: string
                    description: PIMS API specification version
  /formats:
    get:
      description: List of supported formats by PIMS
      tags:
        - Server
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: Formats
                type: array
                items:
                  type: object
                  title: Format
                  properties:
                    id:
                      type: string
                      description: Unique format identifier
                    name:
                      type: string
                      description: Readable format name
                    remarks:
                      type: string
                      description: Readable end-user remarks about the format
  /colormaps:
    get:
      description: List of pre-defined colormaps in PIMS
      tags:
        - Server
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: Colormaps
                type: array
                items:
                  $ref: '#/components/schemas/colormap'
  /colormaps/{colormap}/representation:
    get:
      description: Get a graphic representation of a colormap
      tags:
        - Server
      parameters:
        - name: colormap
          in: path
          required: true
          description: Colormap name
          schema:
            type: string
            format: colormap-name
        - name: width
          in: query
          required: false
          description: Width of the graphic representation, in pixels.
          schema:
            type: integer
            format: int32
            default: 100
        - name: height
          in: query
          required: false
          description: Height of the graphic representation, in pixels.
          schema:
            type: integer
            format: int32
            default: 32
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/generic-image'
            image/png:
              schema:
                $ref: '#/components/schemas/generic-image'
            image/webp:
              schema:
                $ref: '#/components/schemas/generic-image'
        304:
          $ref: '#/components/responses/not-modified'
        404:
          $ref: '#/components/responses/not-found'
  /filters:
    get:
      description: List of pre-defined image filters in PIMS
      tags:
        - Server
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: Filters
                type: array
                items:
                  $ref: '#/components/schemas/filter'
  /file/{filepath}/info:
    get:
      description: Get all information about a file.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    $ref: '#/components/schemas/file-info'
                  image:
                    $ref: '#/components/schemas/image-info'
                  channels:
                    $ref: '#/components/schemas/channels-info'
                  instrument:
                    $ref: '#/components/schemas/instrument-info'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/info/file:
    get:
      description: Get information about a file.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-info'
        304:
          $ref: '#/components/responses/not-modified'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/info/image:
    get:
      description: Get information about an image.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-info'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/info/channels:
    get:
      description: Get information about channels in an image.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels-info'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/info/instrument:
    get:
      description: Get information about instrument in an image.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instrument-info'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/metadata:
    get:
      description: Get readable raw metadata from an image file.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/metadata'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /directory/{directorypath}/usage:
    get:
      description: Directory usage on disk
      tags:
        - Housekeeping
      parameters:
        - name: directorypath
          required: true
          in: path
          schema:
            type: string
          description: The path of the directory
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  n_children:
                    type: integer
                    format: int32
                    description: Number of file children in the directory (recursively)
                  used_size:
                    type: integer
                    format: int64
                    description: Size of the directory, in bytes.
                  available_size:
                    type: integer
                    format: int64
                    description: Available size on disk for the directory, in bytes.
                  total_size:
                    type: integer
                    format: int64
                    description: Directory's disk size, in bytes.
                  used_size_percentage:
                    type: number
                    format: double
                    description: Percentage of used space regarding total size
                    minimum: 0
                    maximum: 100
  /storage/size.json:
    get:
      tags:
        - Housekeeping
      deprecated: true
      description: Get used and free space of the image storage in IMS v1.x and v2.x
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  used:
                    type: integer
                    format: int64
                  available:
                    type: integer
                    format: int64
                  usedP:
                    type: number
                    format: double
                  hostname:
                    type: string
                  mount:
                    type: string
                  ip:
                    type: string
  /file/{filepath}/export/{format}:
    get:
      description: Export a file in a specified format.
      tags:
        - Export
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/export-format'
      responses:
        200:
          description: OK
          headers:
            Content-Disposition:
              $ref: '#/components/headers/Content-Disposition'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}:
    get:
      description: Download a file.
      tags:
        - Export
      parameters:
        - $ref: '#/components/parameters/filepath'
      responses:
        200:
          description: OK
          headers:
            Content-Disposition:
              $ref: '#/components/headers/Content-Disposition'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          $ref: '#/components/responses/not-found-fp'
    delete:
      description: Delete a file and its children
      tags:
        - Housekeeping
      parameters:
        - $ref: '#/components/parameters/filepath'
      responses:
        204:
          description: OK - No content
        404:
          $ref: '#/components/responses/not-found-fp'

components:
  parameters:
    etag:
      name: ETag
      in: header
      description: |
        The RFC 7232 ETag header field in a response provides the entity-tag of
        a selected resource. The entity-tag is an opaque identifier for versions
        and representations of the same resource over time, regardless whether
        multiple versions are valid at the same time. An entity-tag consists of
        an opaque quoted string, possibly prefixed by a weakness indicator (see
        [RFC 7232 Section 2.3](https://tools.ietf.org/html/rfc7232#section-2.3)).
      required: false
      schema:
        type: string
    filepath:
      name: 'filepath'
      in: path
      description: 'The file path, relative to server base path.'
      required: true
      schema:
        type: string
      example: '123/my-file.ext'
    zoom:
      name: zoom
      in: path
      description: |
        The zoom level.
        Zoom 0 has the worst resolution (smallest image, top of the image pyramid).
        Maximum admissible zoom level depends on image.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      example: 0
    tile_index:
      name: tile_index
      in: path
      description: |
        The tile index is the position of the tile in the given image pyramid tier.
        It is computed as `n * n_x_tiles + m` where
        * `n_x_tiles` is the number of tiles along the horizontal axis at given tier.
        * `m` is the tile position along the horizontal axis at given tier (0 is left).
        * `n` is the tile position along the vertical axis at given tier (0 is top).
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
    tile_x:
      name: tile_x
      in: path
      description: |
        The tile position along the horizontal axis at given tier (0 is left).
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
    tile_y:
      name: tile_y
      in: path
      description: |
        The tile position along the vertical axis at given tier (0 is top).
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
    level:
      name: level
      in: path
      description: |
        The tier level.
        Level 0 has the best resolution (largest image, basis of the image pyramid).
        Maximum admissible tier level depends on image.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      example: 0
    export-format:
      name: format
      in: path
      description: |
        The format identifier in which the image is exported. Only a subset of formats are accepted.
      required: true
      schema:
        type: string
    channels:
      name: channels
      in: path
      description: |
        Image channels used to render the response. **The reduction operation to merge the channels
        can be set in `c_reduction` parameter.**
        
        Supported representations are:
        * single channel index: `0`
        * range of channel indexes, separated by semi-colon: `2:6`
        * selection of channel indexes, separated by comma: `3,5,7`
      required: true
      schema:
        oneOf:
          - type: integer
            format: int32
            description: A single channel index
            minimum: 0
          - type: string
            format: range
            description: A range of channel indexes. Start index is inclusive, last one exclusive and must be separated by `:`.
            example: '2:6'
          - type: string
            format: selection
            description: A selection of channel indexes, separated by comma.
            example: '3,5,7'
    z_slices:
      name: z_slices
      in: path
      description: |
        Image focal planes used to create the response. **The reduction operation to merge the focal planes
        can be set in `z_reduction` parameter.**

        Supported representations are:
        * single focal plane index: `0`
        * range of focal planes indexes, separated by semi-colon: `2:6`
        * selection of focal planes indexes, separated by comma: `3,5,7`
      required: true
      schema:
        oneOf:
          - type: integer
            format: int32
            description: A single focal planes index
            minimum: 0
          - type: string
            format: range
            description: A range of focal planes indexes. Start index is inclusive, last one exclusive and must be separated by `:`.
            example: '2:6'
          - type: string
            format: selection
            description: A selection of focal planes indexes, separated by comma.
            example: '3,5,7'
    timepoints:
      name: timepoints
      in: path
      description: |
        Image timepoints used to create the response. **The reduction operation to merge the timepoints
        can be set in `t_reduction` parameter.**

        Supported representations are:
        * single timepoint index: `0`
        * range of timepoints indexes, separated by semi-colon: `2:6`
        * selection of timepoints indexes, separated by comma: `3,5,7`
      required: true
      schema:
        oneOf:
          - type: integer
            format: int32
            description: A single timepoints index
            minimum: 0
          - type: string
            format: range
            description: A range of timepoints indexes. Start index is inclusive, last one exclusive and must be separated by `:`.
            example: '2:6'
          - type: string
            format: selection
            description: A selection of timepoints indexes, separated by comma.
            example: '3,5,7'
    c_reduction:
      name: c_reduction
      in: query
      description: |
        Reduction function used to merge selected channels.
      required: false
      schema:
        $ref: '#/components/schemas/c-reduction'
    z_reduction:
      name: z_reduction
      in: query
      description: |
        Reduction function used to combinate selected focal planes.
        **Must be provided if `z_slices` is not a single focal plane index.**
      required: false
      schema:
        $ref: '#/components/schemas/reduction'
    t_reduction:
      name: t_reduction
      in: query
      description: |
        Reduction function used to combinate selected timepoints.
        **Must be provided if `timepoints` is not a single timepoint index.**
      required: false
      schema:
        $ref: '#/components/schemas/reduction'
    min_intensities:
      name: min_intensities
      in: query
      description: |
        Intensity in the original image used as minimum intensity (black) to create the response.
        As a consequence, original image intensities lower than this value will be black in the response.

        Maximum allowed value depends on image pixel type and is equal to `2 * pow(pixel type)`.

        Minimum intensity is closely related to the concepts of brightness and contrast.
        Brightness is the visual perception of reflected light while contrast is the separation
        of the lightest and darkest parts of an image. A minimum intensity increase leads to:
        * a brightness decrease, which refers to an image's decreased luminance.
        * a contrast increase, which darken shadows and lighten highlights.

        Expected format is an array of size:
        * 1 to apply the minimum intensity to all channels
        * equals to the number of channels used to render the response in order to apply a minimum intensity per channel

        Enumeration supported values:
        * `AUTO_IMAGE` - If image pixel type uses 8 bits, `min_intensity=0`. Otherwise, the behavior is `STRETCH_IMAGE`.
        * `AUTO_PLANE` - If image pixel type uses 8 bits, `min_intensity=0`. Otherwise, the behavior is `STRETCH_SLICE`.
        * `STRETCH_IMAGE` - Set `min_intensity` to lowest intensity in the original image, for each channel.
        * `STRETCH_IMAGE` - Set `min_intensity` to lowest intensity in the set of planes, for each channel.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/intensity-selection-list'
    max_intensities:
      name: max_intensities
      in: query
      description: |
        Intensity in the original image used as maximum intensity (white) to create the response.
        As a consequence, original image intensities greater than this value will be white in the response.

        Maximum allowed value depends on image pixel type and is equal to `2 * pow(pixel type)`.

        Maximum intensity is closely related to the concepts of brightness and contrast.
        Brightness is the visual perception of reflected light while contrast is the separation
        of the lightest and darkest parts of an image. A maximum intensity increase leads to:
        * a brightness decrease, which refers to an image's decreased luminance.
        * a contrast decrease, which darken highlights and lighten shadows.

        Expected format is an array of size:
        * 1 to apply the maximum intensity to all channels
        * equals to the number of channels used to render the response in order to apply a maximum intensity per channel

        Enumeration supported values:
        * `AUTO_IMAGE` - If image pixel type uses 8 bits, `min_intensity=0`. Otherwise, the behavior is `STRETCH_IMAGE`.
        * `AUTO_PLANE` - If image pixel type uses 8 bits, `min_intensity=0`. Otherwise, the behavior is `STRETCH_SLICE`.
        * `STRETCH_IMAGE` - Set `min_intensity` to lowest intensity in the original image, for each channel.
        * `STRETCH_IMAGE` - Set `min_intensity` to lowest intensity in the set of planes, for each channel.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/intensity-selection-list'
    colormaps:
      name: colormaps
      in: query
      description: |
        A colormap is a function that maps the colors of the original image (source) to the colors of the response
        image. The usage of colormap produces a false-color representation of the original image and helps at
        understanding the image.

        Valid colormap names can be found with the endpoint `/colormaps`. The colormap can be reversed by prepending the
        colormap name with `!`.

        Expected format is an array of size:
        * 1 to apply the same colormap to all channels
        * equals to the number of channels used to render the response, in order to apply a colormap per channel.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/colormap-name-list'
    filters:
      name: filters
      in: query
      description: |
        An image filter is used to change the appareance of an image and helps at understanding the
        source image.

        Valid filter names can be found with the endpoint `/filters`.

        Expected format is an array of size:
        * 1 to apply the same filter to all channels
        * equals to the number of channels used to render the response, in order to apply a filter per channel.
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/filter-name-list'
    gammas:
      name: gammas
      in: query
      description: |
        Gamma performs a non-linear histogram adjustment. Pixel intensities in the original image are raised
        to the power of the gamma value.

        If `gamma < 1`, faint objects become more intense while bright objects do not.

        If `gamma > 1`, medium-intensity objects become fainter while bright objects do not.

        Expected format is an array of size:
        * 1 to apply the gamma correction to all channels
        * equals to the number of channels used to render the response in order to applay the gamma correction per channel.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/gamma-list'
    log:
      name: log
      in: query
      description: |
        Apply a logarithmic scale on image data to ease observation of high dynamic range images such as 16-bit images.
      required: false
      schema:
        $ref: '#/components/schemas/log'
    thumb-size:
      name: size
      in: query
      description: |
        Size of the largest side of the thumbnail. The other dimension is adjusted to preserve the aspect ratio.

        **Takes precedence over `zoom`, `level`, `width` and `height`.**
      required: false
      schema:
        $ref: '#/components/schemas/size-default-256'
    thumb-width:
      name: width
      in: query
      description: |
        Width of the thumbnail. Height is adjusted to preserve the aspect ratio.

        **Ignored if `size` is present. Takes precedence over `height`, `zoom` and `level`.**
      required: false
      schema:
        $ref: '#/components/schemas/size'
    thumb-height:
      name: height
      in: query
      description: |
        Height of the thumbnail. Width is adjusted to preserve the aspect ratio.

        **Ignored if `size` or `width` is present. Takes precedence over `zoom` and `level`.**
      required: false
      schema:
        $ref: '#/components/schemas/size'
    thumb-zoom:
      name: zoom
      in: query
      description: |
        The zoom level to consider as thumbnail.
        Zoom 0 has the worst resolution (smallest image, top of the image pyramid).
        Maximum admissible zoom level depends on image.

        **Ignored if `size` or `width` or `height` is present. Takes precedence over `level`.**
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
        example: 0
    thumb-level:
      name: level
      in: query
      description: |
        The tier level.
        Level 0 has the best resolution (largest image, basis of the image pyramid).
        Maximum admissible tier level depends on image.

        **Ignored if `size` or `width` or `height` or `zoom` is present.**
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
        example: 0
  schemas:
    tile:
      type: string
      format: binary
      example: (binary)
    thumbnail:
      type: string
      format: binary
      example: (binary)
    generic-image:
      type: string
      format: binary
      example: (binary)
    c-reduction:
      type: string
      enum:
        - ADD
        - MIN
        - AVG
        - MAX
      default: ADD
    reduction:
      type: string
      enum:
        - MIN
        - AVG
        - MAX
    intensity-selection:
      oneOf:
        - type: string
          enum:
            - AUTO_IMAGE
            - AUTO_SLICE
            - STRETCH_IMAGE
            - STRETCH_SLICE
        - type: integer
          format: int64
    intensity-selection-list:
      oneOf:
        - $ref: '#/components/schemas/intensity-selection'
        - type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/intensity-selection'
    colormap-name:
      type: string
      format: colormap-name
    colormap-name-list:
      oneOf:
        - $ref: '#/components/schemas/colormap-name'
        - type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/colormap-name'
    filter-name:
      type: string
      format: filter-name
    filter-name-list:
      oneOf:
        - $ref: '#/components/schemas/filter-name'
        - type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/filter-name'
    gamma:
      type: number
      format: double
      minimum: 0
      maximum: 10
    gamma-list:
      oneOf:
        - $ref: '#/components/schemas/gamma'
        - type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/gamma'
    log:
      type: boolean
      default: false
    size:
      example: 256
      oneOf:
        - type: integer
          format: int64
          description: A size in pixels.
          minimum: 0
          example: 256
        - type: number
          format: double
          description: A size expressed in percentage relatively to the real image size.
          minimum: 0.0
          maximum: 1.0
          example: 0.5
    size-default-256:
      default: 256
      allOf:
        - $ref: '#/components/schemas/size'
    file-info:
      description: |
        Information about a file
      type: object
      properties:
        stem:
          type: string
          description: The file stem (filename without extension)
        extension:
          type: string
          description: The file extension
        created_at:
          type: string
          format: date
          description: The file creation date
        size:
          type: integer
          format: int64
          description: The file size, in bytes.
    image-info:
      description: |
        Information about an image
      type: object
      properties:
        width:
          type: integer
          format: int64
          description: The (multidimensional) image width. It is the number of pixels along X axis.
          minimum: 1
        height:
          type: integer
          format: int64
          description: The (multidimensional) image height. It is the number of pixels along Y axis.
          minimum: 1
        depth:
          type: integer
          format: int64
          description: The multidimensional image depth. It is the number of focal planes.
          minimum: 1
        duration:
          type: integer
          format: int64
          description: The multidimensional image duration. It is the number of frames.
          minimum: 1
        physical_size_x:
          type: number
          format: double
          description: |
            The physical size of a pixel along the X axis, expressed in nanometers (nm).
          nullable: true
        physical_size_y:
          type: number
          format: double
          description: |
            The physical size of a pixel along the Y axis, expressed in nanometers (nm).
          nullable: true
        physical_size_z:
          type: number
          format: double
          description: |
            The physical size of a pixel (voxel) along the Z axis, expressed in nanometers (nm).
          nullable: true
        frame_rate:
          type: number
          format: double
          description: |
            The frequency at which consecutive timepoints are taken (T axis), expressed in Hz.
          nullable: true
        n_channels:
          type: integer
          format: int64
          description: |
            The number of channels in the image.
            Grayscale images have 1 channel. RGB images have 3 channels.
          minimum: 1
        aquisition_date:
          type: string
          format: date
          description: |
            The acquisition date of the image.
          nullable: true
        description:
          type: string
          description: The image description.
          nullable: true
        pixel_type:
          description: The type used to store each pixel in the image.
          type: string
          enum:
            - int8
            - int16
            - int32
            - uint8
            - uint16
            - uint32
        significant_bits:
          description: The number of bits within the type storing each pixel that are significants.
          type: integer
          minimum: 1
    instrument-info:
      type: object
      description: |
        Information about an instrument in an image file.
      properties:
        microscope:
          type: object
          properties:
            model:
              type: string
              description: The microscope model.
              nullable: true
        objective:
          type: object
          properties:
            nominal_magnification:
              type: number
              format: double
              description: Magnification of the lens specified by the manufacturer.
              nullable: true
            calibrated_magnification:
              type: number
              format: double
              description: Magnification of the lens measured by a calibration process.
              nullable: true
    channels-info:
      type: array
      description: |
        Information about channels in an image file.
      items:
        type: object
        properties:
          samples_per_pixel:
            type: integer
            format: int64
            description: Number of samples taken by detector to form the pixel value.
            minimum: 1
            maximum: 3
          suggested_name:
            type: string
            description: Suggested name for the channel infered from other properties.
          emission_wavelength:
            type: number
            format: double
            description: Wavelength of emission for a particular channel.
            nullable: true
          excitation_wavelength:
            type: number
            format: double
            description: Wavelength of excitation for a particular channel.
            nullable: true
    metadata:
      type: object
      description: |
        A metadata is a key-value pair stored in an image file.
      properties:
        key:
          type: string
          description: The metadata key
        value:
          type: string
          description: The metadata value
        type:
          type: string
          description: The metadata value type
          default: string
    colormap:
      type: object
      description: |
        A colormap is a function that maps colors of an input image to the colors of a target image.
      properties:
        name:
          type: string
          description: |
            A unique identifier to a pre-defined colormap.
        type:
          type: string
          description: |
            * `SEQUENTIAL` - change in lightness and often saturation of color incrementally, often using a single hue;
            should be used for representing information that has ordering.
            * `DIVERGING` - change in lightness and possibly saturation of two different colors that meet in the middle
            at an unsaturated color; should be used when the image has a critical middle value.
            * `QUALITATIVE` - often are miscellaneous colors; should be used to represent information which does
            not have ordering or relationships
          enum:
            - SEQUENTIAL
            - DIVERGING
            - QUALITATIVE
        n_colors:
          type: integer
          format: int32
          description: The number of defined colors in the colormap.

    filter:
      type: object
      description: |
        An image filter is used to change the appareance of an image and helps at understanding the
        source image.
      properties:
        name:
          type: string
          description: |
            A unique identifier to an image filter.
        type:
          type: string
          description: |
            * `LOCAL` - The image filter uses the neighborhood of every pixels.
            * `GLOBAL` - The image filter uses histogram-derived techniques.
          enum:
            - LOCAL
            - GLOBAL
        description:
          type: string
          description: Filter description, explaining how it works, in Markdown.
  headers:
    If-None-Match:
      description: |
        The RFC7232 If-None-Match header field in a request requires the server
        to only operate on the resource if it does not match any of the provided
        entity-tags. If the provided entity-tag is `*`, it is required that the
        resource does not exist at all (see [RFC 7232 Section
        3.2](https://tools.ietf.org/html/rfc7232#section-3.2)).
      required: false
      schema:
        type: string
    Content-Disposition:
      description: |
        This header indicate that the representation is supposed to be saved as
        a file, and the proposed file name.

        The value must be `attachment; filename="{suggested_filename}"`
      required: true
      schema:
        type: string
  responses:
    not-found-fp:
      description: File path not found
      content:
        application/problem+json:
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
    not-found:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
    bad-request-fp:
      description: Bad Request. Input payload fails business logic validation.
      content:
        application/problem+json:
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
    not-modified:
      description: Not modified.
    tile:
      description: The tile
      headers:
        If-None-Match:
          $ref: '#/components/headers/If-None-Match'
      content:
        image/jpeg:
          schema:
            $ref: '#/components/schemas/tile'
        image/png:
          schema:
            $ref: '#/components/schemas/tile'
        image/webp:
          schema:
            $ref: '#/components/schemas/tile'
    thumbnail:
      description: Thumbnail
      headers:
        If-None-Match:
          $ref: '#/components/headers/If-None-Match'
      content:
        image/jpeg:
          schema:
            $ref: '#/components/schemas/thumbnail'
        image/png:
          schema:
            $ref: '#/components/schemas/thumbnail'
        image/webp:
          schema:
            $ref: '#/components/schemas/thumbnail'