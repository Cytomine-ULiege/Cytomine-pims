openapi: 3.0.0
info:
  title: Cytomine Python Image Managament Server PIMS
  description: Cytomine Python Image Managament Server PIMS
  version: 1.0.0
servers:
  - url: 'https'
tags:
  - name: 'Tiles'
    description: |
      Tiles are rectangular regions extracted from an image at given resolution.
      Tile size is always 256x256, except on borders.
  - name: 'Windows'
    description: ''
  - name: 'Thumbnails'
    description: ''
  - name: 'Rescaled'
    description: ''
  - name: 'Metadata'
    description: ''
  - name: 'Export'
    description: ''
  - name: 'Import'
    description: ''
  - name: Server
  - name: Housekeeping
paths:
  /file/{filepath}/tile/zoom/{zoom}/ti/{tile_index}:
    get:
      tags:
        - Tiles
      description: |
        Get a 8-bit tile at a given zoom level and tile index, optimized for visualisation, with all image channels.
        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/zoom'
        - $ref: '#/components/parameters/tile_index'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: The tile
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/tile'
            image/png:
              schema:
                $ref: '#/components/schemas/tile'
            image/webp:
              schema:
                $ref: '#/components/schemas/tile'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/tile/level/{level}/ti/{tile_index}:
    get:
      tags:
        - Tiles
      description: |
        Get a 8-bit tile at given tier level and tile index, optimized for visualisation, with all image channels.
        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/level'
        - $ref: '#/components/parameters/tile_index'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: The tile
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/tile'
            image/png:
              schema:
                $ref: '#/components/schemas/tile'
            image/webp:
              schema:
                $ref: '#/components/schemas/tile'
        400:
          description: Bad request
  /file/{filepath}/tile/zoom/{zoom}/tx/{tile_x}/ty/{tile_y}:
    get:
      tags:
        - Tiles
      description: |
        Get a 8-bit tile at a given zoom level and tile coordinates, optimized for visualisation, with all image channels.
        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/zoom'
        - $ref: '#/components/parameters/tile_x'
        - $ref: '#/components/parameters/tile_y'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: The tile
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/tile'
            image/png:
              schema:
                $ref: '#/components/schemas/tile'
            image/webp:
              schema:
                $ref: '#/components/schemas/tile'
        400:
          description: Bad request
  /file/{filepath}/tile/level/{level}/tx/{tile_x}/ty/{tile_y}:
    get:
      tags:
        - Tiles
      description: |
        Get a 8-bit tile at given tier level and tile coordinates, optimized for visualisation, with all image channels.
        For multidimensional images, the tile is extracted from the median focal plane at first timepoint.
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/level'
        - $ref: '#/components/parameters/tile_x'
        - $ref: '#/components/parameters/tile_y'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: The tile
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/tile'
            image/png:
              schema:
                $ref: '#/components/schemas/tile'
            image/webp:
              schema:
                $ref: '#/components/schemas/tile'
        400:
          description: Bad request
  /slice/tile:
    get:
      description: Get a tile using IMS V2.x specification.
      deprecated: true
      tags:
        - Tiles
      parameters:
        - name: 'mimeType'
          in: query
          description: 'Image mime type'
          required: true
          schema:
            type: string
        - name: 'fif'
          in: query
          description: |
            Full file path.
            Must be used together with `z`.
          schema:
            type: string
        - name: 'z'
          in: query
          description: Zoom level.
          schema:
            type: integer
            format: int64
          required: true
        - name: 'zoomify'
          in: query
          description: |
            Full file path if Zoomify protocol is used.
            Must be used together with `z`, `x`, `y` and `tileGroup`.
          schema:
            type: string
        - name: tileGroup
          in: query
          description: |
            Tile Group used in Zoomify protocol.
            Must be used together with `z`, `x`, `y` and `zoomify`.
          schema:
            type: string
        - name: x
          in: query
          description: |
            X parameter in Zoomify protocol.
            Must be used together with `z`, `y`, `tileGroup` and `zoomify`.
          schema:
            type: integer
            format: int64
        - name: y
          in: query
          description: |
            Y parameter in Zoomify protocol.
            Must be used together with `z`, `x`, `tileGroup` and `zoomify`.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The tile
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/tile'
        400:
          description: Bad request
  /image/tile.jpg:
    get:
      description: Get a tile using IMS V1.x specification.
      deprecated: true
      tags:
        - Tiles
      parameters:
        - name: 'mimeType'
          in: query
          description: 'Image mime type'
          required: true
          schema:
            type: string
        - name: 'z'
          in: query
          description: Zoom level.
          schema:
            type: integer
            format: int64
          required: true
        - name: 'zoomify'
          in: query
          description: |
            Full file path if Zoomify protocol is used.
          required: true
          schema:
            type: string
        - name: tileGroup
          in: query
          description: |
            Tile Group used in Zoomify protocol.
          schema:
            type: string
          required: true
        - name: x
          in: query
          description: |
            X parameter in Zoomify protocol.
          schema:
            type: integer
            format: int64
          required: true
        - name: y
          in: query
          description: |
            Y parameter in Zoomify protocol.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The tile
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/tile'
        400:
          description: Bad
  /info:
    get:
      description: Status of PIMS
      tags:
        - Server
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    description: PIMS version
                  api_version:
                    type: string
                    description: PIMS API specification version
  /formats:
    get:
      description: List of supported formats by PIMS
      tags:
        - Server
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                title: Formats
                type: array
                items:
                  type: object
                  title: Format
                  properties:
                    id:
                      type: string
                      description: Unique format identifier
                    name:
                      type: string
                      description: Readable format name
                    remarks:
                      type: string
                      description: Readable end-user remarks about the format
  /file/{filepath}/info:
    get:
      description: Get all information about a file.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    $ref: '#/components/schemas/file-info'
                  image:
                    $ref: '#/components/schemas/image-info'
                  channels:
                    $ref: '#/components/schemas/channels-info'
                  instrument:
                    $ref: '#/components/schemas/instrument-info'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/info/file:
    get:
      description: Get information about a file.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-info'
        304:
          $ref: '#/components/responses/not-modified'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/info/image:
    get:
      description: Get information about an image.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-info'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/info/channels:
    get:
      description: Get information about channels in an image.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels-info'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/info/instrument:
    get:
      description: Get information about instrument in an image.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instrument-info'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}/metadata:
    get:
      description: Get readable raw metadata from an image file.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/etag'
      responses:
        200:
          description: OK
          headers:
            If-None-Match:
              $ref: '#/components/headers/If-None-Match'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/metadata'
        304:
          $ref: '#/components/responses/not-modified'
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /directory/{directorypath}/usage:
    get:
      description: Directory usage on disk
      tags:
        - Housekeeping
      parameters:
        - name: directorypath
          in: path
          schema:
            type: string
          description: The path of the directory
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  n_children:
                    type: integer
                    format: int32
                    description: Number of file children in the directory (recursively)
                  used_size:
                    type: integer
                    format: int64
                    description: Size of the directory, in bytes.
                  available_size:
                    type: integer
                    format: int64
                    description: Available size on disk for the directory, in bytes.
                  total_size:
                    type: integer
                    format: int64
                    description: Directory's disk size, in bytes.
                  used_size_percentage:
                    type: number
                    format: double
                    description: Percentage of used space regarding total size
                    minimum: 0
                    maximum: 100
  /storage/size.json:
    get:
      tags:
        - Housekeeping
      deprecated: true
      description: Get used and free space of the image storage in IMS v1.x and v2.x
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  used:
                    type: integer
                    format: int64
                  available:
                    type: integer
                    format: int64
                  usedP:
                    type: number
                    format: double
                  hostname:
                    type: string
                  mount:
                    type: string
                  ip:
                    type: string
  /file/{filepath}/export/{format}:
    get:
      description: Export a file in a specified format.
      tags:
        - Export
      parameters:
        - $ref: '#/components/parameters/filepath'
        - $ref: '#/components/parameters/export-format'
      responses:
        200:
          description: OK
          headers:
            Content-Disposition:
              $ref: '#/components/headers/Content-Disposition'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/bad-request-fp'
        404:
          $ref: '#/components/responses/not-found-fp'
  /file/{filepath}:
    get:
      description: Download a file.
      tags:
        - Export
      parameters:
        - $ref: '#/components/parameters/filepath'
      responses:
        200:
          description: OK
          headers:
            Content-Disposition:
              $ref: '#/components/headers/Content-Disposition'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          $ref: '#/components/responses/not-found-fp'
    delete:
      description: Delete a file and its children
      tags:
        - Housekeeping
      parameters:
        - $ref: '#/components/parameters/filepath'
      responses:
        204:
          description: OK - No content
        404:
          $ref: '#/components/responses/not-found-fp'

components:
  parameters:
    etag:
      name: ETag
      in: header
      description: |
        The RFC 7232 ETag header field in a response provides the entity-tag of
        a selected resource. The entity-tag is an opaque identifier for versions
        and representations of the same resource over time, regardless whether
        multiple versions are valid at the same time. An entity-tag consists of
        an opaque quoted string, possibly prefixed by a weakness indicator (see
        [RFC 7232 Section 2.3](https://tools.ietf.org/html/rfc7232#section-2.3)).
      required: false
      schema:
        type: string
    filepath:
      name: 'filepath'
      in: path
      description: 'The file path, relative to server base path.'
      required: true
      schema:
        type: string
      example: '123/my-file.ext'
    zoom:
      name: zoom
      in: path
      description: |
        The zoom level.
        Zoom 0 has the worst resolution (smallest image, top of the image pyramid).
        Maximum admissible zoom level depends on image.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      example: 0
    tile_index:
      name: tile_index
      in: path
      description: |
        The tile index is the position of the tile in the given image pyramid tier.
        It is computed as `n * n_x_tiles + m` where
        * `n_x_tiles` is the number of tiles along the horizontal axis at given tier.
        * `m` is the tile position along the horizontal axis at given tier (0 is left).
        * `n` is the tile position along the vertical axis at given tier (0 is top).
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
    tile_x:
      name: tile_x
      in: path
      description: |
        The tile position along the horizontal axis at given tier (0 is left).
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
    tile_y:
      name: tile_y
      in: path
      description: |
        The tile position along the vertical axis at given tier (0 is top).
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
    level:
      name: level
      in: path
      description: |
        The tier level.
        Level 0 has the best resolution (largest image, basis of the image pyramid).
        Maximum admissible tier level depends on image.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      example: 0
    export-format:
      name: format
      in: path
      description: |
        The format identifier in which the image is exported. Only a subset of formats are accepted.
      required: true
      schema:
        type: string
  schemas:
    tile:
      type: string
      format: binary
    file-info:
      description: |
        Information about a file
      type: object
      properties:
        stem:
          type: string
          description: The file stem (filename without extension)
        extension:
          type: string
          description: The file extension
        created_at:
          type: string
          format: date
          description: The file creation date
        size:
          type: integer
          format: int64
          description: The file size, in bytes.
    image-info:
      description: |
        Information about an image
      type: object
      properties:
        width:
          type: integer
          format: int64
          description: The (multidimensional) image width. It is the number of pixels along X axis.
          minimum: 1
        height:
          type: integer
          format: int64
          description: The (multidimensional) image height. It is the number of pixels along Y axis.
          minimum: 1
        depth:
          type: integer
          format: int64
          description: The multidimensional image depth. It is the number of focal planes.
          minimum: 1
        duration:
          type: integer
          format: int64
          description: The multidimensional image duration. It is the number of frames.
          minimum: 1
        physical_size_x:
          type: number
          format: double
          description: |
            The physical size of a pixel along the X axis, expressed in nanometers (nm).
          nullable: true
        physical_size_y:
          type: number
          format: double
          description: |
            The physical size of a pixel along the Y axis, expressed in nanometers (nm).
          nullable: true
        physical_size_z:
          type: number
          format: double
          description: |
            The physical size of a pixel (voxel) along the Z axis, expressed in nanometers (nm).
          nullable: true
        frame_rate:
          type: number
          format: double
          description: |
            The frequency at which consecutive timepoints are taken (T axis), expressed in Hz.
          nullable: true
        n_channels:
          type: integer
          format: int64
          description: |
            The number of channels in the image.
            Grayscale images have 1 channel. RGB images have 3 channels.
          minimum: 1
        aquisition_date:
          type: string
          format: date
          description: |
            The acquisition date of the image.
          nullable: true
        description:
          type: string
          description: The image description.
          nullable: true
        pixel_type:
          description: The type used to store each pixel in the image.
          type: string
          enum:
            - int8
            - int16
            - int32
            - uint8
            - uint16
            - uint32
        significant_bits:
          description: The number of bits within the type storing each pixel that are significants.
          type: integer
          minimum: 1
    instrument-info:
      type: object
      description: |
        Information about an instrument in an image file.
      properties:
        microscope:
          type: object
          properties:
            model:
              type: string
              description: The microscope model.
              nullable: true
        objective:
          type: object
          properties:
            nominal_magnification:
              type: number
              format: double
              description: Magnification of the lens specified by the manufacturer.
              nullable: true
            calibrated_magnification:
              type: number
              format: double
              description: Magnification of the lens measured by a calibration process.
              nullable: true
    channels-info:
      type: array
      description: |
        Information about channels in an image file.
      items:
        type: object
        properties:
          samples_per_pixel:
            type: integer
            format: int64
            description: Number of samples taken by detector to form the pixel value.
            minimum: 1
            maximum: 3
          suggested_name:
            type: string
            description: Suggested name for the channel infered from other properties.
          emission_wavelength:
            type: number
            format: double
            description: Wavelength of emission for a particular channel.
            nullable: true
          excitation_wavelength:
            type: number
            format: double
            description: Wavelength of excitation for a particular channel.
            nullable: true
    metadata:
      type: object
      description: |
        A metadata is a key-value pair stored in an image file.
      properties:
        key:
          type: string
          description: The metadata key
        value:
          type: string
          description: The metadata value
        type:
          type: string
          description: The metadata value type
          default: string
  headers:
    If-None-Match:
      description: |
        The RFC7232 If-None-Match header field in a request requires the server
        to only operate on the resource if it does not match any of the provided
        entity-tags. If the provided entity-tag is `*`, it is required that the
        resource does not exist at all (see [RFC 7232 Section
        3.2](https://tools.ietf.org/html/rfc7232#section-3.2)).
      required: false
      schema:
        type: string
    Content-Disposition:
      description: |
        This header indicate that the representation is supposed to be saved as
        a file, and the proposed file name.

        The value must be `attachment; filename="{suggested_filename}"`
      required: true
      schema:
        type: string
  responses:
    not-found-fp:
      description: File path not found
      content:
        application/problem+json:
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
    bad-request-fp:
      description: Bad Request. Input payload fails business logic validation.
      content:
        application/problem+json:
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
    not-modified:
      description: Not modified.